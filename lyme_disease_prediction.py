# -*- coding: utf-8 -*-
"""Lyme_Disease_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i5mZROWhv5Lc2z2gS4qj7s15Wa6cKT9n
"""

import numpy as np
import streamlit as st
import cv2
from keras.models import load_model

# Loading the model
model = load_model('model.h5')

# Name of classes
CLASS_NAMES = ['Negative', 'Positive']

# Setting title and introduction of the app
st.title("RashCheck: Lyme Disease Early Detection")
st.markdown(
  """
  Welcome to RashCheck, your at-home Lyme Disease risk assessment tool. Our mission is to empower everyone with the ability to perform an early check for potential Lyme Disease symptoms from the comfort of your own home, before deciding to visit a clinic or hospital.

  **Why RashCheck?**

  Lyme Disease, often transmitted through tick bites, can be effectively managed when detected early. RashCheck helps you recognize early signs of Lyme Disease, specifically Erythema Migrans rashes, which are a common early indicator of the disease.

  **How to Use**

  1. Upload an image of the rashes.
  2. Click the 'Predict' button.
  3. RashCheck will provide you with the result, indicating whether the rashes are potentially Lyme Disease-related.

  We encourage you to consult with a healthcare professional for a comprehensive diagnosis, but RashCheck is here to give you valuable information and help you make informed decisions about your health.
  """
)

# Uploading the rashes image
rash_image = st.file_uploader("Choose an image ...", type="jpg")
submit = st.button('Predict')

# On predict button click
if submit:
  if rash_image is not None:
    # Convert the file to an OpenCV image
    file_bytes = np.asarray(bytearray(rash_image.read()), dtype=np.uint8)
    opencv_image = cv2.imdecode(file_bytes, 1)

    # Displaying the image
    st.image(opencv_image, channels="BGR")

    # Resizing the image
    opencv_image = cv2.resize(opencv_image, (256, 256))

    # Convert image to 4 dimensions
    opencv_image.shape = (1, 256, 256, 3)

    # Make prediction
    Y_pred = model.predict(opencv_image)

    # Display the result
    result_text = "Result: " + CLASS_NAMES[np.argmax(Y_pred)]
    st.subheader(result_text)